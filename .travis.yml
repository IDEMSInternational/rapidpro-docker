sudo: required
services:
  - docker
cache:
  directories:
    - $HOME/postgresql
env:
  global:
    - GREP_TIMEOUT=360
    - REGISTRY_USER=rapidproautomation
    # NOTE: this is generated with `travis encrypt REGISTRY_PASS="the-password"`
    #       which is decrypted by Travis CI and set as environment variables
    - secure: "ftzg9S+hYbPRWVoXmhaZiOTqed4u63Lw90okq6w2AOs5T9LKuf1PVtvjGj7cfJCJqd/nANxedgxTvPeQXRc37rwLnJIikCA/D4e7XfQVOx66SbdyQxDwGtDxaWzR+cZw5yMc3pi4bl53/rXE3Gq0Hsetg7N/6YGBuxVPqIzidRHHo9zbSvb9gwB96bCPWOdtBDsZITHlxS0fNiWhuWi4m4qHlGtDUVaA47ZGfz3heXCnC79kjmJCLuSQvP+wNTOWeFSZ+Ajn0eE5RxqD4nfBRFkdhVJw52RfJqwvJdjnp4gTbHUtZ8fKQIbh+SXdBIXb7KSzhIVGsSl3ixzBvExgAnI6YxtLuzCfDi9D1uZQHWLne2Iexa2za7Y01OaQsLGedU0y5ioigXGayx9wirPCHMKTtzdWZ6G5E5i/DAAHciGW6BM0u/Vk9/Wf3ACxwdbe+pe7hsfPgCxb7KZ8mZmtH9Zx6qjWpqup69hMNaUYIIIY1hDJanO/rC4+6Zpznk/c3YF/AOwpkOsoT/uudnSWTauaDc6nw0PDMTHKdtPm6yjBN+T52Jb7YowlAjVneS+Ej9WHcSXoxjMeuK/RbFWCULX7ywGW0wqOLSD1qmR21A2ur6YRd9aSWVYCirDBHm2dEHEwl8by/Cs6P0oVXF+DA01VA1tBcT+xLCGbwFuNrMo="
  matrix:
    - IMAGE="praekeltfoundation/rapidpro" VERSION="master" REPO="praekeltfoundation/rapidpro"

matrix:
  allow_failures:
    env: VERSION="master"
# Update Docker Engine
before_install:
  - sudo apt-get update
  - sudo apt-get install -qy -o Dpkg::Options::="--force-confold" docker-engine coreutils

before_cache:
  - docker exec --user=postgres postgresql pg_dump rapidpro > $HOME/postgresql/rapidpro.sql

before_script:
  - LATEST_TAG=$(curl -s https://api.github.com/repos/$REPO/tags  | jq -r 'map(select(.name | test("^v[0-9\\.]+$"))) | .[0].name')
  - VERSION=${VERSION:-$LATEST_TAG}

script:
  # Setup postgresql and load sql dump if exists
  - docker pull mdillon/postgis:9.6
  - docker run -d --name postgresql -e POSTGRES_DB=rapidpro mdillon/postgis:9.6
  - timeout $GREP_TIMEOUT grep -m 1 'PostgreSQL init process complete; ready for start up.' <(docker logs --follow postgresql 2>&1)
  # Load the cached postgresql dump to speed up migrations
  - if [[ -f $HOME/postgresql/rapidpro.sql ]]; then cat $HOME/postgresql/rapidpro.sql | docker exec -i --user=postgres postgresql psql rapidpro; fi

  # Setup redis
  - docker pull redis:alpine
  - docker run -d --name redis redis:alpine
  - timeout $GREP_TIMEOUT grep -m 1 'The server is now ready to accept connections on port 6379' <(docker logs --follow redis 2>&1)

  # Build RapidPro and run it
  - docker pull rapidpro/rapidpro-base
  - >
    docker build --tag "$IMAGE" \
      --build-arg RAPIDPRO_VERSION=$VERSION \
      --build-arg VCS_REF=$TRAVIS_COMMIT \
      --build-arg BUILD_DATE=$(date -Iseconds) \
      --build-arg RAPIDPRO_REPO=$REPO \
      .
  - >
    docker run --name rapidpro \
      --env-file docker.envfile \
      --link redis \
      --link postgresql \
      --publish 8000:8000 \
      --detach \
      "$IMAGE"

  - timeout $GREP_TIMEOUT grep -m 1 'static files copied' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'Compressing... done' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'Running migrations' <(docker logs --follow rapidpro 2>&1)
  - timeout $GREP_TIMEOUT grep -m 1 'spawned uWSGI http 1' <(docker logs --follow rapidpro 2>&1)
  - docker exec rapidpro python /rapidpro/manage.py check

after_script:
  - docker logs rapidpro
  - docker images

before_deploy:
  - docker login -u "$REGISTRY_USER" -p "$REGISTRY_PASS"
deploy:
  provider: script
  skip_cleanup: true
  script: ./deploy.sh "$IMAGE" "$VERSION"
  on:
    branch: master
